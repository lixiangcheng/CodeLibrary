<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xmlns:jaxws="http://cxf.apache.org/jaxws"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/cache
		http://www.springframework.org/schema/cache/spring-cache-3.2.xsd
		http://cxf.apache.org/jaxws
		http://cxf.apache.org/schemas/jaxws.xsd">


    <!--扫描@Component @Controller@Service等注解的类.并注册为bean.
    1.扫描粒度比较大,可以通过
    <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    指定扫描控制器,其他同理.
    2.use-dafault-filter默认是打开的.如果使用1.必须设置为false
    -->
    <context:component-scan base-package="com.lee.business.**.controller"/>

    <!--主要注册了DefaultAnnotationHandlerMapping与AnnotationMethodHandlerAdapter 两个bean.
    还有其他诸多数据支持.

    经过实验.不注册下面的配置,也是能正常访问的.具体有待后续考察.2016-7-2
    完了。考察失败。现在不写不能映射了。2016-7-4
    -->
    <mvc:annotation-driven/>
    <!--提供的视图解析器
        我们使用的是jsp所以使用InternalResourceViewResolver作为我们的视图解析器
    -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!--<property name="viewClass">
            <value>org.springframework.web.servlet.view.JstlView</value>
        </property>-->
        <property name="prefix" value="/WEB-INF/jsp/"></property>
        <property name="suffix" value=".jsp"></property>
    </bean>

    <!-- 这样根目录下面的resource的文件(.css,.js等)就不会被spring的DispatchServlet进行过滤  也可以设置缓存 -->
    <mvc:resources mapping="/dist/**" location="/dist/" cache-period="86400"/>
    <mvc:resources mapping="/highcharts/**" location="/highcharts/" cache-period="86400"/>
    <mvc:resources mapping="/manageStyle/**" location="/manageStyle/" cache-period="86400"/>
    <mvc:resources mapping="/reactjs/**" location="/reactjs/" cache-period="86400"/>

    <!--演示aop的原理-->
    <bean id="audience" class="com.lee.aop.Audience"/>
    <bean id="sax" class="com.lee.aop.InstrumentImpl"/>
    <bean id="lee" class="com.lee.aop.PerformerImpl">
        <property name="song" value="李志恒"/>
        <property name="age" value="25"/>
        <property name="instrument" ref="sax"/>
    </bean>
    <aop:config proxy-target-class="true">
        <!--用来定义切面，该切面可以包含多个切入点和通知，而且标签内部的通知和切入点定义是无序的；和advisor的区别就在此，advisor只包含一个通知和一个切入点-->
        <aop:aspect ref="audience">
            <!--用来定义切入点，该切入点可以重用-->
            <aop:pointcut id="performance" expression="execution(* com.lee.aop.Performer.perform(..))"/>

            <aop:before pointcut-ref="performance" method="takeSeats"/>
            <aop:before pointcut-ref="performance" method="turnOffCellPhones"/>
            <aop:after-returning pointcut-ref="performance" method="applaud"/>
            <aop:after-throwing pointcut-ref="performance" method="demandRefund"/>
        </aop:aspect>
    </aop:config>
    <!--演示aop的原理-->

</beans>
